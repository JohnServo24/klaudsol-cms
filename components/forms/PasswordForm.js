import { useFormikContext } from "formik";
import { AUTO_PASSWORD, CUSTOM_PASSWORD, writeUsers } from "lib/Constants";
import { generateRandVals } from "@klaudsol/commons/lib/Math";
import AdminRenderer from "@/components/renderers/admin/AdminRenderer";
import { useContext, useState } from "react";
import CacheContext from "../contexts/CacheContext";
import PasswordSelection from "../klaudsolcms/selection_controls/PasswordSelection";
import { FaRandom } from "react-icons/fa";
import AppTextButton from "../klaudsolcms/buttons/AppTextButton";

export default function PasswordForm({ defaultMode, changePass }) {
    const [passwordMode, setPasswordMode] = useState(defaultMode ?? AUTO_PASSWORD);

    const { setFieldValue, values, errors, touched } = useFormikContext();
    const { capabilities } = useContext(CacheContext);

    const setRandomPassword = async () => {
        const randVal = await generateRandVals(5);

        setFieldValue('password', randVal);
        setFieldValue('confirmPassword', randVal);
        setFieldValue('forcePasswordChange', true);
    }

    return (
        <>
            <h4>Password</h4>
            <PasswordSelection setRandomPassword={setRandomPassword} passwordMode={passwordMode} setPasswordMode={setPasswordMode} />
            {changePass &&
                <>
                    <p className="general-input-title"> Old Password </p>
                    <AdminRenderer
                        errors={errors}
                        touched={touched}
                        type="password"
                        name="oldPassword"
                        disabled={!capabilities.includes(writeUsers)}
                    />
                </>
            }
            {(passwordMode === AUTO_PASSWORD) &&
                <>
                    <p className="general-input-title"> Autogenerated Password </p>
                    <AdminRenderer
                        errors={errors}
                        touched={touched}
                        type="password"
                        name="password"
                        readOnly={true}
                    />
                    <div className="d-flex justify-content-end">
                        <AppTextButton title="Regenerate Password" icon={<FaRandom />} onClick={setRandomPassword} />
                    </div>
                </>
            }
            {(passwordMode === CUSTOM_PASSWORD) &&
                <>
                    <p className="general-input-title"> {changePass ? "New Password" : "Password"} </p>
                    <AdminRenderer
                        errors={errors}
                        touched={touched}
                        type="password"
                        name="password"
                        disabled={!capabilities.includes(writeUsers) || passwordMode === AUTO_PASSWORD}
                    />
                    <p className="general-input-title"> {changePass ? "Confirm New Password" : "Confirm Password"} </p>
                    <AdminRenderer
                        errors={errors}
                        touched={touched}
                        type="password"
                        name="confirmPassword"
                        disabled={!capabilities.includes(writeUsers) || passwordMode === AUTO_PASSWORD}
                    />
                </>
            }
            <AdminRenderer
                title="Force password change"
                errors={errors}
                touched={touched}
                type="checkbox"
                name="forcePasswordChange"
                checked={values.forcePasswordChange}
                disabled={!capabilities.includes(writeUsers)}
            />
        </>
    );
}
